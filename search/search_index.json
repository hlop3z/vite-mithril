{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Vi-Thrill ( Vite + Mithril ) Vite + Mithril Together. Frontend Applications This is just a simple example of how to use Vite and Mithril together to create Frontend Applications . Download Vi-Thrill Install npm install && \\ npm run dev Project Layout root/ |-- public/ | `-- vite.svg -> (For Demo inside `./index.html`) |-- src/ | |-- components -> App Components | |-- plugins -> App Plugins (Global Functions) | |-- store -> App Store (Global Variables) | |-- views -> App Views | |-- app.js -> Automatically Loads (Components, Store, Views) | |-- main.js -> App Main File. | `-- style.css -> (For Demo inside `@/src/main.js`) |-- static/ | `-- javascript.svg -> (For Demo inside `@/src/views/home`) |-- etc... `-- index.html -> HTML File","title":"Introduction"},{"location":"#welcome-to-vi-thrill-vite-mithril","text":"Vite + Mithril Together.","title":"Welcome to Vi-Thrill (Vite + Mithril)"},{"location":"#frontend-applications","text":"This is just a simple example of how to use Vite and Mithril together to create Frontend Applications .","title":"Frontend Applications"},{"location":"#download","text":"Vi-Thrill","title":"Download"},{"location":"#install","text":"npm install && \\ npm run dev","title":"Install"},{"location":"#project-layout","text":"root/ |-- public/ | `-- vite.svg -> (For Demo inside `./index.html`) |-- src/ | |-- components -> App Components | |-- plugins -> App Plugins (Global Functions) | |-- store -> App Store (Global Variables) | |-- views -> App Views | |-- app.js -> Automatically Loads (Components, Store, Views) | |-- main.js -> App Main File. | `-- style.css -> (For Demo inside `@/src/main.js`) |-- static/ | `-- javascript.svg -> (For Demo inside `@/src/views/home`) |-- etc... `-- index.html -> HTML File","title":"Project Layout"},{"location":"app/","text":"Main File ./src/main.js Create a File(JS) touch ./src/main.js Write Code main.js import m from \"mithril\" ; /* CSS */ import \"@/style.css\" ; /* Components */ import App from \"./app\" ; /* App */ window . m = m ; window . $ui = App ; /* Mount */ m . route ( document . body , \"/home\" , { \"/home\" : { render () { return m ( App . view [ \"list\" ], { projectName : \"(vite + mithril)\" }); }, }, \"/edit/:id\" : { render ( vnode ) { return m ( App . view [ \"form\" ], vnode . attrs ); }, }, });","title":"Main"},{"location":"app/#main-file","text":"./src/main.js","title":"Main File"},{"location":"app/#create-a-filejs","text":"touch ./src/main.js","title":"Create a File(JS)"},{"location":"app/#write-code","text":"main.js import m from \"mithril\" ; /* CSS */ import \"@/style.css\" ; /* Components */ import App from \"./app\" ; /* App */ window . m = m ; window . $ui = App ; /* Mount */ m . route ( document . body , \"/home\" , { \"/home\" : { render () { return m ( App . view [ \"list\" ], { projectName : \"(vite + mithril)\" }); }, }, \"/edit/:id\" : { render ( vnode ) { return m ( App . view [ \"form\" ], vnode . attrs ); }, }, });","title":"Write Code"},{"location":"plugin/","text":"Plugins aka Global Methods ./src/plugins/styleCss.js Create a File(JS) touch ./src/plugins/styleCss.js Write Code plugins/styleCss.js class StyleCss { constructor () { this . $items = {}; } static init () { return new StyleCss (); } add ( key , value ) { if ( key && value ) { const val = value . replace ( \";\" , \"\" ); this . $items [ key ] = ` ${ key } : ${ val } ;` ; } } get css () { return Object . values ( this . $items ). join ( \" \" ); } } function styleCss () { return StyleCss . init (); } export default styleCss ;","title":"StyleCSS"},{"location":"plugin/#plugins","text":"aka Global Methods ./src/plugins/styleCss.js","title":"Plugins"},{"location":"plugin/#create-a-filejs","text":"touch ./src/plugins/styleCss.js","title":"Create a File(JS)"},{"location":"plugin/#write-code","text":"plugins/styleCss.js class StyleCss { constructor () { this . $items = {}; } static init () { return new StyleCss (); } add ( key , value ) { if ( key && value ) { const val = value . replace ( \";\" , \"\" ); this . $items [ key ] = ` ${ key } : ${ val } ;` ; } } get css () { return Object . values ( this . $items ). join ( \" \" ); } } function styleCss () { return StyleCss . init (); } export default styleCss ;","title":"Write Code"},{"location":"store/","text":"Store Variables ./src/store/{ @Store } Create a File(JS) touch ./src/store/user.store.js Write Code store/user.store.js const data = { current : {}, list : [], }; const ctrl = { async get ( id ) { const result = await m . request ({ method : \"GET\" , url : \"https://rem-rest-api.herokuapp.com/api/users/\" + id , withCredentials : true , }); data . current = result ; }, async list () { const result = await m . request ({ method : \"GET\" , url : \"https://rem-rest-api.herokuapp.com/api/users\" , withCredentials : true , }); data . list = result . data ; }, async save () { console . log ( \"Save Data!!!\" ); }, }; export default { data , ctrl , };","title":"Store"},{"location":"store/#store-variables","text":"./src/store/{ @Store }","title":"Store Variables"},{"location":"store/#create-a-filejs","text":"touch ./src/store/user.store.js","title":"Create a File(JS)"},{"location":"store/#write-code","text":"store/user.store.js const data = { current : {}, list : [], }; const ctrl = { async get ( id ) { const result = await m . request ({ method : \"GET\" , url : \"https://rem-rest-api.herokuapp.com/api/users/\" + id , withCredentials : true , }); data . current = result ; }, async list () { const result = await m . request ({ method : \"GET\" , url : \"https://rem-rest-api.herokuapp.com/api/users\" , withCredentials : true , }); data . list = result . data ; }, async save () { console . log ( \"Save Data!!!\" ); }, }; export default { data , ctrl , };","title":"Write Code"},{"location":"components/form/","text":"Form Component ./src/components/{ @MyComponents } Create a File(JSX) touch ./src/components/form.jsx Write Code components/form.jsx import styleCss from \"@/plugins/styleCss\" ; export default { oninit : ( vnode ) => $ui . store [ \"user\" ]. ctrl . get ( vnode . attrs . id ), view ( vnode ) { /* Style - CSS */ const style = styleCss (); const { setup } = vnode . attrs ; if ( setup ) { if ( setup . color ) { style . add ( \"background-color\" , setup . color ); } if ( setup [ \"text-color\" ]) { style . add ( \"color\" , setup [ \"text-color\" ]); } } style . add ( \"margin-left\" , \"80px\" ); style . add ( \"margin-top\" , \"8px\" ); return ( < form onsubmit = {( e ) => { e . preventDefault (); $ui . store [ \"user\" ]. ctrl . save (); }} > < label > First Name : < /label> < input type = \"text\" placeholder = \"First Name\" value = { $ui . store [ \"user\" ]. data . current . firstName } oninput = {( e ) => { console . log ( e . target . value ); }} /> < br /> < label > Last Name : < /label> < input type = \"text\" placeholder = \"Last Name\" value = { $ui . store [ \"user\" ]. data . current . lastName } oninput = {( e ) => { console . log ( e . target . value ); }} /> < br /> < button type = \"button\" onclick = {() => $ui . go ( \"/\" )} > Go Back < /button> < button type = \"submit\" style = { style . css } > Save < /button> < /form> ); }, };","title":"Form"},{"location":"components/form/#form-component","text":"./src/components/{ @MyComponents }","title":"Form Component"},{"location":"components/form/#create-a-filejsx","text":"touch ./src/components/form.jsx","title":"Create a File(JSX)"},{"location":"components/form/#write-code","text":"components/form.jsx import styleCss from \"@/plugins/styleCss\" ; export default { oninit : ( vnode ) => $ui . store [ \"user\" ]. ctrl . get ( vnode . attrs . id ), view ( vnode ) { /* Style - CSS */ const style = styleCss (); const { setup } = vnode . attrs ; if ( setup ) { if ( setup . color ) { style . add ( \"background-color\" , setup . color ); } if ( setup [ \"text-color\" ]) { style . add ( \"color\" , setup [ \"text-color\" ]); } } style . add ( \"margin-left\" , \"80px\" ); style . add ( \"margin-top\" , \"8px\" ); return ( < form onsubmit = {( e ) => { e . preventDefault (); $ui . store [ \"user\" ]. ctrl . save (); }} > < label > First Name : < /label> < input type = \"text\" placeholder = \"First Name\" value = { $ui . store [ \"user\" ]. data . current . firstName } oninput = {( e ) => { console . log ( e . target . value ); }} /> < br /> < label > Last Name : < /label> < input type = \"text\" placeholder = \"Last Name\" value = { $ui . store [ \"user\" ]. data . current . lastName } oninput = {( e ) => { console . log ( e . target . value ); }} /> < br /> < button type = \"button\" onclick = {() => $ui . go ( \"/\" )} > Go Back < /button> < button type = \"submit\" style = { style . css } > Save < /button> < /form> ); }, };","title":"Write Code"},{"location":"components/list/","text":"List Component ./src/components/{ @MyComponents } Create a File(JSX) touch ./src/components/list.jsx Write Code components/list.jsx export default { oninit : () => $ui . store [ \"user\" ]. ctrl . list (), view : () => ( < ul class = \"user-list\" > { $ui . store [ \"user\" ]. data . list . map (( user ) => ( < li class = \"user-list-item\" onclick = {() => $ui . go ( `/edit/ ${ user . id } ` )} key = { user . id } > { user . firstName } { user . lastName } < /li> ))} < /ul> ), };","title":"List"},{"location":"components/list/#list-component","text":"./src/components/{ @MyComponents }","title":"List Component"},{"location":"components/list/#create-a-filejsx","text":"touch ./src/components/list.jsx","title":"Create a File(JSX)"},{"location":"components/list/#write-code","text":"components/list.jsx export default { oninit : () => $ui . store [ \"user\" ]. ctrl . list (), view : () => ( < ul class = \"user-list\" > { $ui . store [ \"user\" ]. data . list . map (( user ) => ( < li class = \"user-list-item\" onclick = {() => $ui . go ( `/edit/ ${ user . id } ` )} key = { user . id } > { user . firstName } { user . lastName } < /li> ))} < /ul> ), };","title":"Write Code"},{"location":"views/form/","text":"Form Components ./src/views/{ @View } Create a File(JSX) touch ./src/views/form.jsx Write Code views/form.jsx export default { view ({ attrs }) { const formComponent = $ui . component [ \"form\" ]({ id : attrs . id , setup : { color : \"blue\" , \"text-color\" : \"white\" }, }); return < main > { formComponent } < /main>; }, };","title":"Form"},{"location":"views/form/#form-components","text":"./src/views/{ @View }","title":"Form Components"},{"location":"views/form/#create-a-filejsx","text":"touch ./src/views/form.jsx","title":"Create a File(JSX)"},{"location":"views/form/#write-code","text":"views/form.jsx export default { view ({ attrs }) { const formComponent = $ui . component [ \"form\" ]({ id : attrs . id , setup : { color : \"blue\" , \"text-color\" : \"white\" }, }); return < main > { formComponent } < /main>; }, };","title":"Write Code"},{"location":"views/list/","text":"List View ./src/views/{ @View } Create a File(JSX) touch ./src/views/list.jsx Write Code views/list.jsx export default { view ({ attrs }) { const listComponent = $ui . component [ \"list\" ](); return < main > { listComponent } < /main>; }, };","title":"List"},{"location":"views/list/#list-view","text":"./src/views/{ @View }","title":"List View"},{"location":"views/list/#create-a-filejsx","text":"touch ./src/views/list.jsx","title":"Create a File(JSX)"},{"location":"views/list/#write-code","text":"views/list.jsx export default { view ({ attrs }) { const listComponent = $ui . component [ \"list\" ](); return < main > { listComponent } < /main>; }, };","title":"Write Code"}]}